# Importing Libraries

# for data manipulation
import numpy as np
import pandas as pd

# for data visualizations
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import statsmodels.api as sm

# for data preprocessing
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
from sklearn.preprocessing import MinMaxScaler, StandardScaler

# for model training 

from sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier,plot_tree
from sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB,BernoulliNB

# for model evaluation 

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
from sklearn.metrics import roc_curve,roc_auc_score

# for basic statistical operations

from statsmodels.stats.outliers_influence import variance_inflation_factor
from scipy import stats
from scipy.stats import shapiro

# miscellaneous
import pickle
import warnings
warnings.filterwarnings('ignore')

# Data Gathering

df = pd.read_csv(r"C:\Users\Dell\Downloads\Loan_Data.csv")
print(df)

# Exploratory Data Analysis

print(df.shape)                                # gives number of rows and colomns
print(df.columns)                              # give all the column names
print(df["Loan_Amount_Term"].unique())
print(df["Property_Area"].unique())
print(df["Credit_History"].unique())

print(df.describe())                           # give all the statistical information
print(df.info())                               # gives all the basic information

print(df.isna().sum())                         # ckecks if the column have missing values

# checking if any columns have outliers
print(sns.boxenplot(df["ApplicantIncome"]))
print(sns.boxenplot(df["CoapplicantIncome"]))
print(sns.boxenplot(df["LoanAmount"]))
print(sns.boxenplot(df["Loan_Amount_Term"]))
print(sns.boxenplot(df["Credit_History"]))

# Check outliers

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3-Q1

LowerTail = Q1-1.5*IQR
UpperTail = Q3+1.5*IQR

show_outliers = (df<LowerTail)|(df>UpperTail)
outlier_count = show_outliers.sum()
print(outlier_count)

# finding correlation
print(sns.heatmap(df.corr(),annot=True))